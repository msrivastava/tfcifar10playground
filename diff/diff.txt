Only in mcifar10: __init__.pyc
diff mcifar10/cifar10.py mcifar10_configurable_r0.9/cifar10.py
13,14c13
< # limitations under the License.    
< # For NEFESH COMPUTER
---
> # limitations under the License.
224c223
<   pool2 = tf.nn.max_pool(norm2, ksize=[1, 5, 5, 1],
---
>   pool2 = tf.nn.max_pool(norm2, ksize=[1, 3, 3, 1],
Only in mcifar10: cifar10.pyc
diff mcifar10/cifar10_eval.py mcifar10_configurable_r0.9/cifar10_eval.py
40d39
< import sys
64d62
< 	num_predictions = 0
66,67d63
< 		#hits = 0
< 		#false_alarms = 0
72,75d67
< 			#num_predictions += model_predictions[i]
< 			#hits += (correct_predictions[i])
< 			#false_alarms += (model_predictions[i]-correct_predictions[i])
< 			#print("Index: "+str(i)+" Hits: "+str(hits)+" False Alarm: "+str(false_alarms))
78c70
< 		return 0 
---
> 		return 0
86,87d77
< 		hits = 0
< 		misses = 0
92,123d81
< 			hits += correct_predictions[i]
< 			misses += (needed_predictions[i]-correct_predictions[i])
< 			print("Index: "+str(i)+" Hits: "+str(hits)+" Misses: "+str(misses)+" ")
< 			amount += 1
< 	if(amount == 0):
< 		return 0
< 	return sum_avg/amount
< 
< def calculate_false_positives(incorrect_predictions, needed_predictions):
< 	if (len(incorrect_predictions) == len(needed_predictions)):
< 		print("Yay! LENGHTS MATCH")
< 	sum_avg = 0
< 	amount = 0
< 	for class_index in range(len(incorrect_predictions)):
< 		false_positives = 0
< 		correct_rejects = 0
< 		negative_amt = 0
< 		for i in range(len(needed_predictions)):
< 			if(i != class_index):
< 				negative_amt += needed_predictions[i]
< 		if (incorrect_predictions[class_index] == 0):
< 			print("Index: "+str(class_index)+" False Positives: 0 Correct Rejects: "+str(negative_amt)+" ")
< 			sum_avg += 0
< 			amount += 1
< 		else:
< 			#print(class_index)
< 			sum_avg += (incorrect_predictions[class_index]/negative_amt)
< 			false_positives += incorrect_predictions[class_index]
< 			correct_rejects += (negative_amt - incorrect_predictions[class_index])
< 			#print(incorrect_predictions[class_index])
< 			#print(negative_amt)
< 			print("Index: "+str(class_index)+" False Positives: "+str(false_positives)+" Correct Rejects: "+str(correct_rejects))
165d122
<       new_incorrect_predicts_for_each_label = [0 for i in range(cifar10.NUM_CLASSES)]
170,173c127,129
<         #print(actual_labels)
<         #print(predictions)
<         #print("new indices: ")
<         #print(new_indices)  
---
>         print(actual_labels)
>         print(predictions)
>         print([item for sublist in new_indices for item in sublist])
176c132
<         	predict_class = new_indices[i][0]
---
>         	predict_class = new_indices[i]
181,183c137
< 	        	new_correct_predicts_for_each_label[predict_class] += 1
< 	        else:
< 	        	new_incorrect_predicts_for_each_label[predict_class] += 1   	                 
---
> 	        	new_correct_predicts_for_each_label[predict_class] += 1                  
191c145
<       print("Megha's Recall/ TRUE POSITIVE Rate: ")
---
>       print("Megha's Recall: ")
193,194d146
<       print("Megha's False Positive Rate: ")
<       print(calculate_false_positives(new_incorrect_predicts_for_each_label, new_actual_amount_per_label))
diff mcifar10/cifar10_input.py mcifar10_configurable_r0.9/cifar10_input.py
13,14c13
< # limitations under the License. 
< # Megha: FOR NEFESH COMP
---
> # limitations under the License.
37c36
< DATA_URL = 'https://dl.dropbox.com/s/u1dn6z5j8u79w71/Classification_All_Blur_140v1.zip'
---
> DATA_URL = 'https://dl.dropboxusercontent.com/s/3i2da52ktt4l9j0/Classification_Pi_Noise_Nc.zip'
40c39
< EVAL_FILE = 'all_test13.bin'
---
> EVAL_FILE = 'all_train.bin'
43c42
< NUM_EXAMPLES_PER_EPOCH_FOR_EVAL = 303
---
> NUM_EXAMPLES_PER_EPOCH_FOR_EVAL = 1212
Only in mcifar10: cifar10_input.pyc
diff mcifar10/cifar10_train.py mcifar10_configurable_r0.9/cifar10_train.py
13,15c13
< # limitations under the License.     
< 
< # FOR NEFESH COMPUTER
---
> # limitations under the License.
